import { Text, useSend } from 'alemonjs'

import { data, redis } from '@src/model/api'
import { notUndAndNull, shijianc, addCoin } from '@src/model/index'
import type { Player, AssociationDetailData } from '@src/types'

import { selects } from '@src/response/index'
export const regular = /^(#|＃|\/)?开采灵脉$/
const 宗门灵石池上限 = [
  2000000, 5000000, 8000000, 11000000, 15000000, 20000000, 25000000, 30000000
]

interface PlayerGuildRef {
  宗门名称: string
  职位: string
}
function isPlayerGuildRef(v: unknown): v is PlayerGuildRef {
  return !!v && typeof v === 'object' && '宗门名称' in v && '职位' in v
}
interface ExtAss extends AssociationDetailData {
  宗门驻地?: string | number
  宗门神兽?: string
  灵石池?: number
  宗门等级?: number
}
function isExtAss(v: unknown): v is ExtAss {
  return !!v && typeof v === 'object' && 'power' in v
}
interface DateParts {
  Y: number
  M: number
  D: number
}
function isDateParts(v: unknown): v is DateParts {
  return !!v && typeof v === 'object' && 'Y' in v && 'M' in v && 'D' in v
}
interface BlessSite {
  name: string
  level: number
}

export default onResponse(selects, async e => {
  const Send = useSend(e)
  const usr_qq = e.UserId
  if (!(await data.existData('player', usr_qq))) return false
  const player = (await data.getData('player', usr_qq)) as Player | null
  if (!player || !notUndAndNull(player.宗门) || !isPlayerGuildRef(player.宗门))
    return false

  const assRaw = await data.getAssociation(player.宗门.宗门名称)
  if (assRaw === 'error' || !isExtAss(assRaw)) {
    Send(Text('宗门数据不存在'))
    return false
  }
  const ass = assRaw

  if (!ass.宗门驻地 || ass.宗门驻地 === 0) {
    Send(Text('你的宗门还没有驻地哦，没有灵脉可以开采'))
    return false
  }

  const nowTime = Date.now()
  const Today = await shijianc(nowTime)
  const lastsign_time = await getLastsign_Explor(usr_qq)
  if (isDateParts(Today) && isDateParts(lastsign_time)) {
    if (
      Today.Y === lastsign_time.Y &&
      Today.M === lastsign_time.M &&
      Today.D === lastsign_time.D
    ) {
      Send(Text('今日已经开采过灵脉，不可以竭泽而渔哦，明天再来吧'))
      return false
    }
  }

  // 记录今日开采
  await redis.set(`xiuxian@1.3.0:${usr_qq}:getLastsign_Explor`, String(nowTime))

  // 计算奖励
  const blessListRaw = data.bless_list as unknown[] | undefined
  const blessList: BlessSite[] = Array.isArray(blessListRaw)
    ? blessListRaw
        .map(it => {
          if (it && typeof it === 'object') {
            const obj = it as Record<string, unknown>
            const name = obj.name
            const levelVal = obj.level
            if (typeof name === 'string' && typeof levelVal === 'number') {
              return { name, level: levelVal } as BlessSite
            }
          }
          return null
        })
        .filter((v): v is BlessSite => v !== null)
    : []
  let dongTan = blessList.find(item => item.name === ass.宗门驻地)
  if (!dongTan) dongTan = blessList.find(item => item.name === '昆仑山')
  if (!dongTan) {
    Send(Text('未找到灵脉信息，稍后再试'))
    return false
  }
  const rawLevelId = (player as Record<string, unknown>).level_id
  const playerLevel =
    typeof rawLevelId === 'number' ? rawLevelId : Number(rawLevelId) || 1
  const baseLevel = ass.宗门神兽 === '麒麟' ? dongTan.level + 1 : dongTan.level
  let totalYield = 1200 * baseLevel * playerLevel // 总产出
  // 仙界倍率
  if (ass.power === 1) totalYield *= 10
  const totalInt = Math.max(1, Math.trunc(totalYield))
  const giveGuild = Math.trunc(totalInt / 2)
  const givePlayer = totalInt - giveGuild

  // 灵石池上限处理
  const guildLevel = Math.max(1, Number(ass.宗门等级 || 1))
  const baseCap = 宗门灵石池上限[guildLevel - 1] || 宗门灵石池上限[0]
  const cap = ass.power === 1 ? baseCap * 10 : baseCap
  const currentPool = Math.max(0, Number(ass.灵石池 || 0))
  ass.灵石池 = Math.min(cap, currentPool + giveGuild)

  await addCoin(usr_qq, givePlayer)
  await data.setAssociation(ass.宗门名称, ass)
  Send(
    Text(
      `本次开采灵脉共获得${totalInt}灵石，上交${giveGuild}灵石给宗门，自己获得${givePlayer}灵石`
    )
  )
  return false
})

// 获取上次开采灵脉的日期（仅日期部分）
async function getLastsign_Explor(usr_qq: string): Promise<DateParts | null> {
  const time = await redis.get(`xiuxian@1.3.0:${usr_qq}:getLastsign_Explor`)
  if (time) {
    const parts = await shijianc(parseInt(time, 10))
    if (isDateParts(parts)) return parts
  }
  return null
}
